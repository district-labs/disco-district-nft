{
  "address": "0xc81136B1f99b4bA4F6c0BddC56AB8D5EFb9E908f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_erc721TokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CONTROLLER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "enforcer",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "terms",
              "type": "bytes"
            }
          ],
          "internalType": "struct Caveat[]",
          "name": "_input",
          "type": "tuple[]"
        }
      ],
      "name": "GET_CAVEAT_ARRAY_PACKETHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "enforcer",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "terms",
              "type": "bytes"
            }
          ],
          "internalType": "struct Caveat",
          "name": "_input",
          "type": "tuple"
        }
      ],
      "name": "GET_CAVEAT_PACKETHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "delegate",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "authority",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "enforcer",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "terms",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Caveat[]",
              "name": "caveats",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Delegation",
          "name": "_input",
          "type": "tuple"
        }
      ],
      "name": "GET_DELEGATION_PACKETHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "gasLimit",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct Transaction",
                  "name": "transaction",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "address",
                          "name": "delegate",
                          "type": "address"
                        },
                        {
                          "internalType": "bytes32",
                          "name": "authority",
                          "type": "bytes32"
                        },
                        {
                          "components": [
                            {
                              "internalType": "address",
                              "name": "enforcer",
                              "type": "address"
                            },
                            {
                              "internalType": "bytes",
                              "name": "terms",
                              "type": "bytes"
                            }
                          ],
                          "internalType": "struct Caveat[]",
                          "name": "caveats",
                          "type": "tuple[]"
                        }
                      ],
                      "internalType": "struct Delegation",
                      "name": "delegation",
                      "type": "tuple"
                    },
                    {
                      "internalType": "bytes",
                      "name": "signature",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct SignedDelegation[]",
                  "name": "authority",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct Invocation[]",
              "name": "batch",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "queue",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ReplayProtection",
              "name": "replayProtection",
              "type": "tuple"
            }
          ],
          "internalType": "struct Invocations",
          "name": "_input",
          "type": "tuple"
        }
      ],
      "name": "GET_INVOCATIONS_PACKETHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "gasLimit",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Transaction",
              "name": "transaction",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "delegate",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "authority",
                      "type": "bytes32"
                    },
                    {
                      "components": [
                        {
                          "internalType": "address",
                          "name": "enforcer",
                          "type": "address"
                        },
                        {
                          "internalType": "bytes",
                          "name": "terms",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct Caveat[]",
                      "name": "caveats",
                      "type": "tuple[]"
                    }
                  ],
                  "internalType": "struct Delegation",
                  "name": "delegation",
                  "type": "tuple"
                },
                {
                  "internalType": "bytes",
                  "name": "signature",
                  "type": "bytes"
                }
              ],
              "internalType": "struct SignedDelegation[]",
              "name": "authority",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Invocation[]",
          "name": "_input",
          "type": "tuple[]"
        }
      ],
      "name": "GET_INVOCATION_ARRAY_PACKETHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "gasLimit",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Transaction",
              "name": "transaction",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "delegate",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "authority",
                      "type": "bytes32"
                    },
                    {
                      "components": [
                        {
                          "internalType": "address",
                          "name": "enforcer",
                          "type": "address"
                        },
                        {
                          "internalType": "bytes",
                          "name": "terms",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct Caveat[]",
                      "name": "caveats",
                      "type": "tuple[]"
                    }
                  ],
                  "internalType": "struct Delegation",
                  "name": "delegation",
                  "type": "tuple"
                },
                {
                  "internalType": "bytes",
                  "name": "signature",
                  "type": "bytes"
                }
              ],
              "internalType": "struct SignedDelegation[]",
              "name": "authority",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Invocation",
          "name": "_input",
          "type": "tuple"
        }
      ],
      "name": "GET_INVOCATION_PACKETHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "queue",
              "type": "uint256"
            }
          ],
          "internalType": "struct ReplayProtection",
          "name": "_input",
          "type": "tuple"
        }
      ],
      "name": "GET_REPLAYPROTECTION_PACKETHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "delegate",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "authority",
                  "type": "bytes32"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "enforcer",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes",
                      "name": "terms",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct Caveat[]",
                  "name": "caveats",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct Delegation",
              "name": "delegation",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct SignedDelegation[]",
          "name": "_input",
          "type": "tuple[]"
        }
      ],
      "name": "GET_SIGNEDDELEGATION_ARRAY_PACKETHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "delegate",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "authority",
                  "type": "bytes32"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "enforcer",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes",
                      "name": "terms",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct Caveat[]",
                  "name": "caveats",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct Delegation",
              "name": "delegation",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct SignedDelegation",
          "name": "_input",
          "type": "tuple"
        }
      ],
      "name": "GET_SIGNEDDELEGATION_PACKETHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "gasLimit",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Transaction",
          "name": "_input",
          "type": "tuple"
        }
      ],
      "name": "GET_TRANSACTION_PACKETHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "gasLimit",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Transaction",
              "name": "transaction",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "delegate",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "authority",
                      "type": "bytes32"
                    },
                    {
                      "components": [
                        {
                          "internalType": "address",
                          "name": "enforcer",
                          "type": "address"
                        },
                        {
                          "internalType": "bytes",
                          "name": "terms",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct Caveat[]",
                      "name": "caveats",
                      "type": "tuple[]"
                    }
                  ],
                  "internalType": "struct Delegation",
                  "name": "delegation",
                  "type": "tuple"
                },
                {
                  "internalType": "bytes",
                  "name": "signature",
                  "type": "bytes"
                }
              ],
              "internalType": "struct SignedDelegation[]",
              "name": "authority",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Invocation[]",
          "name": "batch",
          "type": "tuple[]"
        }
      ],
      "name": "contractInvoke",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "controllerBurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "controllerMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "domainHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "erc721TokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "delegate",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "authority",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "enforcer",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "terms",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Caveat[]",
              "name": "caveats",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Delegation",
          "name": "delegation",
          "type": "tuple"
        }
      ],
      "name": "getDelegationTypedDataHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "contractName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "version",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "verifyingContract",
          "type": "address"
        }
      ],
      "name": "getEIP712DomainHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "gasLimit",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct Transaction",
                  "name": "transaction",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "address",
                          "name": "delegate",
                          "type": "address"
                        },
                        {
                          "internalType": "bytes32",
                          "name": "authority",
                          "type": "bytes32"
                        },
                        {
                          "components": [
                            {
                              "internalType": "address",
                              "name": "enforcer",
                              "type": "address"
                            },
                            {
                              "internalType": "bytes",
                              "name": "terms",
                              "type": "bytes"
                            }
                          ],
                          "internalType": "struct Caveat[]",
                          "name": "caveats",
                          "type": "tuple[]"
                        }
                      ],
                      "internalType": "struct Delegation",
                      "name": "delegation",
                      "type": "tuple"
                    },
                    {
                      "internalType": "bytes",
                      "name": "signature",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct SignedDelegation[]",
                  "name": "authority",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct Invocation[]",
              "name": "batch",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "queue",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ReplayProtection",
              "name": "replayProtection",
              "type": "tuple"
            }
          ],
          "internalType": "struct Invocations",
          "name": "invocations",
          "type": "tuple"
        }
      ],
      "name": "getInvocationsTypedDataHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "intendedSender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "queue",
          "type": "uint256"
        }
      ],
      "name": "getNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        }
      ],
      "name": "grantMinterRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "address",
                          "name": "to",
                          "type": "address"
                        },
                        {
                          "internalType": "uint256",
                          "name": "gasLimit",
                          "type": "uint256"
                        },
                        {
                          "internalType": "bytes",
                          "name": "data",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct Transaction",
                      "name": "transaction",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "components": [
                            {
                              "internalType": "address",
                              "name": "delegate",
                              "type": "address"
                            },
                            {
                              "internalType": "bytes32",
                              "name": "authority",
                              "type": "bytes32"
                            },
                            {
                              "components": [
                                {
                                  "internalType": "address",
                                  "name": "enforcer",
                                  "type": "address"
                                },
                                {
                                  "internalType": "bytes",
                                  "name": "terms",
                                  "type": "bytes"
                                }
                              ],
                              "internalType": "struct Caveat[]",
                              "name": "caveats",
                              "type": "tuple[]"
                            }
                          ],
                          "internalType": "struct Delegation",
                          "name": "delegation",
                          "type": "tuple"
                        },
                        {
                          "internalType": "bytes",
                          "name": "signature",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct SignedDelegation[]",
                      "name": "authority",
                      "type": "tuple[]"
                    }
                  ],
                  "internalType": "struct Invocation[]",
                  "name": "batch",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "nonce",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "queue",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct ReplayProtection",
                  "name": "replayProtection",
                  "type": "tuple"
                }
              ],
              "internalType": "struct Invocations",
              "name": "invocations",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct SignedInvocation[]",
          "name": "signedInvocations",
          "type": "tuple[]"
        }
      ],
      "name": "invoke",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        }
      ],
      "name": "revokeMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "transferAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "delegate",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "authority",
                  "type": "bytes32"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "enforcer",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes",
                      "name": "terms",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct Caveat[]",
                  "name": "caveats",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct Delegation",
              "name": "delegation",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct SignedDelegation",
          "name": "signedDelegation",
          "type": "tuple"
        }
      ],
      "name": "verifyDelegationSignature",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "address",
                          "name": "to",
                          "type": "address"
                        },
                        {
                          "internalType": "uint256",
                          "name": "gasLimit",
                          "type": "uint256"
                        },
                        {
                          "internalType": "bytes",
                          "name": "data",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct Transaction",
                      "name": "transaction",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "components": [
                            {
                              "internalType": "address",
                              "name": "delegate",
                              "type": "address"
                            },
                            {
                              "internalType": "bytes32",
                              "name": "authority",
                              "type": "bytes32"
                            },
                            {
                              "components": [
                                {
                                  "internalType": "address",
                                  "name": "enforcer",
                                  "type": "address"
                                },
                                {
                                  "internalType": "bytes",
                                  "name": "terms",
                                  "type": "bytes"
                                }
                              ],
                              "internalType": "struct Caveat[]",
                              "name": "caveats",
                              "type": "tuple[]"
                            }
                          ],
                          "internalType": "struct Delegation",
                          "name": "delegation",
                          "type": "tuple"
                        },
                        {
                          "internalType": "bytes",
                          "name": "signature",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct SignedDelegation[]",
                      "name": "authority",
                      "type": "tuple[]"
                    }
                  ],
                  "internalType": "struct Invocation[]",
                  "name": "batch",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "nonce",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "queue",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct ReplayProtection",
                  "name": "replayProtection",
                  "type": "tuple"
                }
              ],
              "internalType": "struct Invocations",
              "name": "invocations",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct SignedInvocation",
          "name": "signedInvocation",
          "type": "tuple"
        }
      ],
      "name": "verifyInvocationSignature",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc6bfeaa5bef19e0c3b4bd5db4d0c7add5938b7b67004939643e4000e170cc157",
  "receipt": {
    "to": null,
    "from": "0x2258A593F8C35C3634dE17Fd5E9320e00d699264",
    "contractAddress": "0xc81136B1f99b4bA4F6c0BddC56AB8D5EFb9E908f",
    "transactionIndex": 18,
    "gasUsed": "2215424",
    "logsBloom": "0x
    "blockHash": "0x19e4e65a77daa223c44135385c57accd73f84d5f9c46e1ccd19d744472aa1eed",
    "transactionHash": "0xc6bfeaa5bef19e0c3b4bd5db4d0c7add5938b7b67004939643e4000e170cc157",
    "logs": [
      {
        "transactionIndex": 18,
        "blockNumber": 8214755,
        "transactionHash": "0xc6bfeaa5bef19e0c3b4bd5db4d0c7add5938b7b67004939643e4000e170cc157",
        "address": "0xc81136B1f99b4bA4F6c0BddC56AB8D5EFb9E908f",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002258a593f8c35c3634de17fd5e9320e00d699264",
          "0x0000000000000000000000002258a593f8c35c3634de17fd5e9320e00d699264"
        ],
        "data": "0x",
        "logIndex": 32,
        "blockHash": "0x19e4e65a77daa223c44135385c57accd73f84d5f9c46e1ccd19d744472aa1eed"
      },
      {
        "transactionIndex": 18,
        "blockNumber": 8214755,
        "transactionHash": "0xc6bfeaa5bef19e0c3b4bd5db4d0c7add5938b7b67004939643e4000e170cc157",
        "address": "0xc81136B1f99b4bA4F6c0BddC56AB8D5EFb9E908f",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x7b765e0e932d348852a6f810bfa1ab891e259123f02db8cdcde614c570223357",
          "0x000000000000000000000000533e243d0a222f3a007a6751d321e83669eb6f5d",
          "0x0000000000000000000000002258a593f8c35c3634de17fd5e9320e00d699264"
        ],
        "data": "0x",
        "logIndex": 33,
        "blockHash": "0x19e4e65a77daa223c44135385c57accd73f84d5f9c46e1ccd19d744472aa1eed"
      }
    ],
    "blockNumber": 8214755,
    "cumulativeGasUsed": "9869825",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x728f6e35C3ECE2fD121A0cEB54AeB71774316c2E",
    "0x2258A593F8C35C3634dE17Fd5E9320e00d699264",
    "0x533E243d0A222f3A007A6751d321e83669eb6f5D"
  ],
  "numDeployments": 1,
  "solcInputHash": "d06e085c042c002b65261e5da6ac7418",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc721TokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONTROLLER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"enforcer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"terms\",\"type\":\"bytes\"}],\"internalType\":\"struct Caveat[]\",\"name\":\"_input\",\"type\":\"tuple[]\"}],\"name\":\"GET_CAVEAT_ARRAY_PACKETHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"enforcer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"terms\",\"type\":\"bytes\"}],\"internalType\":\"struct Caveat\",\"name\":\"_input\",\"type\":\"tuple\"}],\"name\":\"GET_CAVEAT_PACKETHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"authority\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"enforcer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"terms\",\"type\":\"bytes\"}],\"internalType\":\"struct Caveat[]\",\"name\":\"caveats\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Delegation\",\"name\":\"_input\",\"type\":\"tuple\"}],\"name\":\"GET_DELEGATION_PACKETHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Transaction\",\"name\":\"transaction\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"authority\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"enforcer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"terms\",\"type\":\"bytes\"}],\"internalType\":\"struct Caveat[]\",\"name\":\"caveats\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Delegation\",\"name\":\"delegation\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignedDelegation[]\",\"name\":\"authority\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Invocation[]\",\"name\":\"batch\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"queue\",\"type\":\"uint256\"}],\"internalType\":\"struct ReplayProtection\",\"name\":\"replayProtection\",\"type\":\"tuple\"}],\"internalType\":\"struct Invocations\",\"name\":\"_input\",\"type\":\"tuple\"}],\"name\":\"GET_INVOCATIONS_PACKETHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Transaction\",\"name\":\"transaction\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"authority\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"enforcer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"terms\",\"type\":\"bytes\"}],\"internalType\":\"struct Caveat[]\",\"name\":\"caveats\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Delegation\",\"name\":\"delegation\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignedDelegation[]\",\"name\":\"authority\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Invocation[]\",\"name\":\"_input\",\"type\":\"tuple[]\"}],\"name\":\"GET_INVOCATION_ARRAY_PACKETHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Transaction\",\"name\":\"transaction\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"authority\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"enforcer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"terms\",\"type\":\"bytes\"}],\"internalType\":\"struct Caveat[]\",\"name\":\"caveats\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Delegation\",\"name\":\"delegation\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignedDelegation[]\",\"name\":\"authority\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Invocation\",\"name\":\"_input\",\"type\":\"tuple\"}],\"name\":\"GET_INVOCATION_PACKETHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"queue\",\"type\":\"uint256\"}],\"internalType\":\"struct ReplayProtection\",\"name\":\"_input\",\"type\":\"tuple\"}],\"name\":\"GET_REPLAYPROTECTION_PACKETHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"authority\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"enforcer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"terms\",\"type\":\"bytes\"}],\"internalType\":\"struct Caveat[]\",\"name\":\"caveats\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Delegation\",\"name\":\"delegation\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignedDelegation[]\",\"name\":\"_input\",\"type\":\"tuple[]\"}],\"name\":\"GET_SIGNEDDELEGATION_ARRAY_PACKETHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"authority\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"enforcer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"terms\",\"type\":\"bytes\"}],\"internalType\":\"struct Caveat[]\",\"name\":\"caveats\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Delegation\",\"name\":\"delegation\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignedDelegation\",\"name\":\"_input\",\"type\":\"tuple\"}],\"name\":\"GET_SIGNEDDELEGATION_PACKETHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Transaction\",\"name\":\"_input\",\"type\":\"tuple\"}],\"name\":\"GET_TRANSACTION_PACKETHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Transaction\",\"name\":\"transaction\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"authority\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"enforcer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"terms\",\"type\":\"bytes\"}],\"internalType\":\"struct Caveat[]\",\"name\":\"caveats\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Delegation\",\"name\":\"delegation\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignedDelegation[]\",\"name\":\"authority\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Invocation[]\",\"name\":\"batch\",\"type\":\"tuple[]\"}],\"name\":\"contractInvoke\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"controllerBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"controllerMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc721TokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"authority\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"enforcer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"terms\",\"type\":\"bytes\"}],\"internalType\":\"struct Caveat[]\",\"name\":\"caveats\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Delegation\",\"name\":\"delegation\",\"type\":\"tuple\"}],\"name\":\"getDelegationTypedDataHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"contractName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"}],\"name\":\"getEIP712DomainHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Transaction\",\"name\":\"transaction\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"authority\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"enforcer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"terms\",\"type\":\"bytes\"}],\"internalType\":\"struct Caveat[]\",\"name\":\"caveats\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Delegation\",\"name\":\"delegation\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignedDelegation[]\",\"name\":\"authority\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Invocation[]\",\"name\":\"batch\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"queue\",\"type\":\"uint256\"}],\"internalType\":\"struct ReplayProtection\",\"name\":\"replayProtection\",\"type\":\"tuple\"}],\"internalType\":\"struct Invocations\",\"name\":\"invocations\",\"type\":\"tuple\"}],\"name\":\"getInvocationsTypedDataHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"intendedSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"queue\",\"type\":\"uint256\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"grantMinterRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Transaction\",\"name\":\"transaction\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"authority\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"enforcer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"terms\",\"type\":\"bytes\"}],\"internalType\":\"struct Caveat[]\",\"name\":\"caveats\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Delegation\",\"name\":\"delegation\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignedDelegation[]\",\"name\":\"authority\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Invocation[]\",\"name\":\"batch\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"queue\",\"type\":\"uint256\"}],\"internalType\":\"struct ReplayProtection\",\"name\":\"replayProtection\",\"type\":\"tuple\"}],\"internalType\":\"struct Invocations\",\"name\":\"invocations\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignedInvocation[]\",\"name\":\"signedInvocations\",\"type\":\"tuple[]\"}],\"name\":\"invoke\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"revokeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"authority\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"enforcer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"terms\",\"type\":\"bytes\"}],\"internalType\":\"struct Caveat[]\",\"name\":\"caveats\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Delegation\",\"name\":\"delegation\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignedDelegation\",\"name\":\"signedDelegation\",\"type\":\"tuple\"}],\"name\":\"verifyDelegationSignature\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Transaction\",\"name\":\"transaction\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"authority\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"enforcer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"terms\",\"type\":\"bytes\"}],\"internalType\":\"struct Caveat[]\",\"name\":\"caveats\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Delegation\",\"name\":\"delegation\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignedDelegation[]\",\"name\":\"authority\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Invocation[]\",\"name\":\"batch\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"queue\",\"type\":\"uint256\"}],\"internalType\":\"struct ReplayProtection\",\"name\":\"replayProtection\",\"type\":\"tuple\"}],\"internalType\":\"struct Invocations\",\"name\":\"invocations\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignedInvocation\",\"name\":\"signedInvocation\",\"type\":\"tuple\"}],\"name\":\"verifyInvocationSignature\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"contractInvoke(((address,uint256,bytes),((address,bytes32,(address,bytes)[]),bytes)[])[])\":{\"params\":{\"batch\":\"Invocation[] - The batch of invocations to process.\"},\"returns\":{\"_0\":\"success bool - Whether the batch of invocations was successfully processed.\"}},\"getDelegationTypedDataHash((address,bytes32,(address,bytes)[]))\":{\"params\":{\"delegation\":\"Delegation - The delegation to get the type of\"},\"returns\":{\"_0\":\"bytes32 - The type of the delegation\"}},\"getInvocationsTypedDataHash((((address,uint256,bytes),((address,bytes32,(address,bytes)[]),bytes)[])[],(uint256,uint256)))\":{\"params\":{\"invocations\":\"Invocations\"},\"returns\":{\"_0\":\"bytes32 - The type of the Invocations\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"invoke(((((address,uint256,bytes),((address,bytes32,(address,bytes)[]),bytes)[])[],(uint256,uint256)),bytes)[])\":{\"params\":{\"signedInvocations\":\"SignedInvocation[] - The batch of signed invocations to process.\"},\"returns\":{\"success\":\"bool - Whether the batch of invocations was successfully processed.\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"verifyInvocationSignature(((((address,uint256,bytes),((address,bytes32,(address,bytes)[]),bytes)[])[],(uint256,uint256)),bytes))\":{\"params\":{\"signedInvocation\":\"- The signed invocation to verify\"},\"returns\":{\"_0\":\"address - The address of the account authorizing this invocation to act on its behalf.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"contractInvoke(((address,uint256,bytes),((address,bytes32,(address,bytes)[]),bytes)[])[])\":{\"notice\":\"Allows a smart contract to submit a batch of invocations for processing, allowing itself to be the delegate.\"},\"domainHash()\":{\"notice\":\"The hash of the domain separator used in the EIP712 domain hash.\"},\"getDelegationTypedDataHash((address,bytes32,(address,bytes)[]))\":{\"notice\":\"Returns the typehash for this contract's delegation signatures.\"},\"getInvocationsTypedDataHash((((address,uint256,bytes),((address,bytes32,(address,bytes)[]),bytes)[])[],(uint256,uint256)))\":{\"notice\":\"Returns the typehash for this contract's invocation signatures.\"},\"invoke(((((address,uint256,bytes),((address,bytes32,(address,bytes)[]),bytes)[])[],(uint256,uint256)),bytes)[])\":{\"notice\":\"Allows anyone to submit a batch of signed invocations for processing.\"},\"verifyInvocationSignature(((((address,uint256,bytes),((address,bytes32,(address,bytes)[]),bytes)[])[],(uint256,uint256)),bytes))\":{\"notice\":\"Verifies that the given invocation is valid.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DelegatableERC721Controller.sol\":\"DelegatableERC721Controller\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Delegatable/CaveatEnforcer.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"./TypesAndDecoders.sol\\\";\\n\\nabstract contract CaveatEnforcer {\\n  function enforceCaveat(\\n    bytes calldata terms,\\n    Transaction calldata tx,\\n    bytes32 delegationHash\\n  ) public virtual returns (bool);\\n}\\n\",\"keccak256\":\"0xc992ce49937c7bd60213650b3e54b28ecc034f18583c49c0a33bf594eefaf712\",\"license\":\"MIT\"},\"contracts/Delegatable/Delegatable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport { EIP712DOMAIN_TYPEHASH } from \\\"./TypesAndDecoders.sol\\\";\\nimport { Delegation, Invocation, Invocations, SignedInvocation, SignedDelegation } from \\\"./CaveatEnforcer.sol\\\";\\nimport { DelegatableCore } from \\\"./DelegatableCore.sol\\\";\\nimport { IDelegatable } from \\\"./interfaces/IDelegatable.sol\\\";\\n\\nabstract contract Delegatable is IDelegatable, DelegatableCore {\\n  /// @notice The hash of the domain separator used in the EIP712 domain hash.\\n  bytes32 public immutable domainHash;\\n\\n  /**\\n   * @notice Delegatable Constructor\\n   * @param contractName string - The name of the contract\\n   * @param version string - The version of the contract\\n   */\\n  constructor(string memory contractName, string memory version) {\\n    domainHash = getEIP712DomainHash(contractName, version, block.chainid, address(this));\\n  }\\n\\n  /* ===================================================================================== */\\n  /* External Functions                                                                    */\\n  /* ===================================================================================== */\\n\\n  /// @inheritdoc IDelegatable\\n  function getDelegationTypedDataHash(Delegation memory delegation) public view returns (bytes32) {\\n    bytes32 digest = keccak256(\\n      abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainHash, GET_DELEGATION_PACKETHASH(delegation))\\n    );\\n    return digest;\\n  }\\n\\n  /// @inheritdoc IDelegatable\\n  function getInvocationsTypedDataHash(Invocations memory invocations)\\n    public\\n    view\\n    returns (bytes32)\\n  {\\n    bytes32 digest = keccak256(\\n      abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainHash, GET_INVOCATIONS_PACKETHASH(invocations))\\n    );\\n    return digest;\\n  }\\n\\n  function getEIP712DomainHash(\\n    string memory contractName,\\n    string memory version,\\n    uint256 chainId,\\n    address verifyingContract\\n  ) public pure returns (bytes32) {\\n    bytes memory encoded = abi.encode(\\n      EIP712DOMAIN_TYPEHASH,\\n      keccak256(bytes(contractName)),\\n      keccak256(bytes(version)),\\n      chainId,\\n      verifyingContract\\n    );\\n    return keccak256(encoded);\\n  }\\n\\n  function verifyDelegationSignature(SignedDelegation memory signedDelegation)\\n    public\\n    view\\n    virtual\\n    override(IDelegatable, DelegatableCore)\\n    returns (address)\\n  {\\n    Delegation memory delegation = signedDelegation.delegation;\\n    bytes32 sigHash = getDelegationTypedDataHash(delegation);\\n    address recoveredSignatureSigner = recover(sigHash, signedDelegation.signature);\\n    return recoveredSignatureSigner;\\n  }\\n\\n  function verifyInvocationSignature(SignedInvocation memory signedInvocation)\\n    public\\n    view\\n    returns (address)\\n  {\\n    bytes32 sigHash = getInvocationsTypedDataHash(signedInvocation.invocations);\\n    address recoveredSignatureSigner = recover(sigHash, signedInvocation.signature);\\n    return recoveredSignatureSigner;\\n  }\\n\\n  // --------------------------------------\\n  // WRITES\\n  // --------------------------------------\\n\\n  /// @inheritdoc IDelegatable\\n  function contractInvoke(Invocation[] calldata batch) external override returns (bool) {\\n    return _invoke(batch, msg.sender);\\n  }\\n\\n  /// @inheritdoc IDelegatable\\n  function invoke(SignedInvocation[] calldata signedInvocations)\\n    external\\n    override\\n    returns (bool success)\\n  {\\n    for (uint256 i = 0; i < signedInvocations.length; i++) {\\n      SignedInvocation calldata signedInvocation = signedInvocations[i];\\n      address invocationSigner = verifyInvocationSignature(signedInvocation);\\n      _enforceReplayProtection(invocationSigner, signedInvocations[i].invocations.replayProtection);\\n      _invoke(signedInvocation.invocations.batch, invocationSigner);\\n    }\\n  }\\n\\n  /* ===================================================================================== */\\n  /* Internal Functions                                                                    */\\n  /* ===================================================================================== */\\n}\\n\",\"keccak256\":\"0xdd6081e15c615fa57b42ac69332826e08361d92c84deb549639fa1f67b5ee227\",\"license\":\"MIT\"},\"contracts/Delegatable/DelegatableCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport {EIP712Decoder, EIP712DOMAIN_TYPEHASH} from \\\"./TypesAndDecoders.sol\\\";\\nimport {Delegation, Invocation, Invocations, SignedInvocation, SignedDelegation, Transaction, ReplayProtection, CaveatEnforcer} from \\\"./CaveatEnforcer.sol\\\";\\n\\nabstract contract DelegatableCore is EIP712Decoder {\\n    /// @notice Account delegation nonce manager\\n    mapping(address => mapping(uint256 => uint256)) internal multiNonce;\\n\\n    function getNonce(address intendedSender, uint256 queue)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return multiNonce[intendedSender][queue];\\n    }\\n\\n    function verifyDelegationSignature(SignedDelegation memory signedDelegation)\\n        public\\n        view\\n        virtual\\n        returns (address);\\n\\n    function _enforceReplayProtection(\\n        address intendedSender,\\n        ReplayProtection memory protection\\n    ) internal {\\n        uint256 queue = protection.queue;\\n        uint256 nonce = protection.nonce;\\n        require(\\n            nonce == (multiNonce[intendedSender][queue] + 1),\\n            \\\"DelegatableCore:nonce2-out-of-order\\\"\\n        );\\n        multiNonce[intendedSender][queue] = nonce;\\n    }\\n\\n    function _execute(\\n        address to,\\n        bytes memory data,\\n        uint256 gasLimit,\\n        address sender\\n    ) internal returns (bool success) {\\n        bytes memory full = abi.encodePacked(data, sender);\\n        bytes memory errorMessage;\\n        (success, errorMessage) = address(to).call{gas: gasLimit}(full);\\n\\n        if (!success) {\\n            if (errorMessage.length > 0) {\\n                string memory reason = extractRevertReason(errorMessage);\\n                revert(reason);\\n            } else {\\n                revert(\\\"DelegatableCore::execution-failed\\\");\\n            }\\n        }\\n    }\\n\\n    function extractRevertReason(bytes memory revertData)\\n        internal\\n        pure\\n        returns (string memory reason)\\n    {\\n        uint256 l = revertData.length;\\n        if (l < 68) return \\\"\\\";\\n        uint256 t;\\n        assembly {\\n            revertData := add(revertData, 4)\\n            t := mload(revertData) // Save the content of the length slot\\n            mstore(revertData, sub(l, 4)) // Set proper length\\n        }\\n        reason = abi.decode(revertData, (string));\\n        assembly {\\n            mstore(revertData, t) // Restore the content of the length slot\\n        }\\n    }\\n\\n    function _invoke(Invocation[] calldata batch, address sender)\\n        internal\\n        returns (bool success)\\n    {\\n        for (uint256 x = 0; x < batch.length; x++) {\\n            Invocation memory invocation = batch[x];\\n            address intendedSender;\\n            address canGrant;\\n\\n            // If there are no delegations, this invocation comes from the signer\\n            if (invocation.authority.length == 0) {\\n                intendedSender = sender;\\n                canGrant = intendedSender;\\n            }\\n\\n            bytes32 authHash = 0x0;\\n\\n            for (uint256 d = 0; d < invocation.authority.length; d++) {\\n                SignedDelegation memory signedDelegation = invocation.authority[\\n                    d\\n                ];\\n                address delegationSigner = verifyDelegationSignature(\\n                    signedDelegation\\n                );\\n\\n                // Implied sending account is the signer of the first delegation\\n                if (d == 0) {\\n                    intendedSender = delegationSigner;\\n                    canGrant = intendedSender;\\n                }\\n\\n                require(\\n                    delegationSigner == canGrant,\\n                    \\\"DelegatableCore:invalid-delegation-signer\\\"\\n                );\\n\\n                Delegation memory delegation = signedDelegation.delegation;\\n                require(\\n                    delegation.authority == authHash,\\n                    \\\"DelegatableCore:invalid-authority-delegation-link\\\"\\n                );\\n\\n                // TODO: maybe delegations should have replay protection, at least a nonce (non order dependent),\\n                // otherwise once it's revoked, you can't give the exact same permission again.\\n                bytes32 delegationHash = GET_SIGNEDDELEGATION_PACKETHASH(\\n                    signedDelegation\\n                );\\n\\n                // Each delegation can include any number of caveats.\\n                // A caveat is any condition that may reject a proposed transaction.\\n                // The caveats specify an external contract that is passed the proposed tx,\\n                // As well as some extra terms that are used to parameterize the enforcer.\\n                for (uint16 y = 0; y < delegation.caveats.length; y++) {\\n                    CaveatEnforcer enforcer = CaveatEnforcer(\\n                        delegation.caveats[y].enforcer\\n                    );\\n                    bool caveatSuccess = enforcer.enforceCaveat(\\n                        delegation.caveats[y].terms,\\n                        invocation.transaction,\\n                        delegationHash\\n                    );\\n                    require(caveatSuccess, \\\"DelegatableCore:caveat-rejected\\\");\\n                }\\n\\n                // Store the hash of this delegation in `authHash`\\n                // That way the next delegation can be verified against it.\\n                authHash = delegationHash;\\n                canGrant = delegation.delegate;\\n            }\\n\\n            // Here we perform the requested invocation.\\n            Transaction memory transaction = invocation.transaction;\\n\\n            require(\\n                transaction.to == address(this),\\n                \\\"DelegatableCore:invalid-invocation-target\\\"\\n            );\\n\\n            // TODO(@kames): Can we bubble up the error message from the enforcer? Why not? Optimizations?\\n            success = _execute(\\n                transaction.to,\\n                transaction.data,\\n                transaction.gasLimit,\\n                intendedSender\\n            );\\n            require(success, \\\"DelegatableCore::execution-failed\\\");\\n        }\\n    }\\n\\n    function _msgSender() internal view virtual returns (address sender) {\\n        if (msg.sender == address(this)) {\\n            bytes memory array = msg.data;\\n            uint256 index = msg.data.length;\\n            assembly {\\n                sender := and(\\n                    mload(add(array, index)),\\n                    0xffffffffffffffffffffffffffffffffffffffff\\n                )\\n            }\\n        } else {\\n            sender = msg.sender;\\n        }\\n        return sender;\\n    }\\n}\\n\",\"keccak256\":\"0x52f02d0092aab2990010f6acf8199231b638e03fe0c87a156849f035fd74df15\",\"license\":\"MIT\"},\"contracts/Delegatable/TypesAndDecoders.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\nimport \\\"./libraries/ECRecovery.sol\\\";\\n\\n// BEGIN EIP712 AUTOGENERATED SETUP\\nstruct EIP712Domain {\\n  string name;\\n  string version;\\n  uint256 chainId;\\n  address verifyingContract;\\n}\\n\\nbytes32 constant EIP712DOMAIN_TYPEHASH = keccak256(\\n  \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n);\\n\\nstruct Invocation {\\n  Transaction transaction;\\n  SignedDelegation[] authority;\\n}\\n\\nbytes32 constant INVOCATION_TYPEHASH = keccak256(\\n  \\\"Invocation(Transaction transaction,SignedDelegation[] authority)Caveat(address enforcer,bytes terms)Delegation(address delegate,bytes32 authority,Caveat[] caveats)SignedDelegation(Delegation delegation,bytes signature)Transaction(address to,uint256 gasLimit,bytes data)\\\"\\n);\\n\\nstruct Invocations {\\n  Invocation[] batch;\\n  ReplayProtection replayProtection;\\n}\\n\\nbytes32 constant INVOCATIONS_TYPEHASH = keccak256(\\n  \\\"Invocations(Invocation[] batch,ReplayProtection replayProtection)Caveat(address enforcer,bytes terms)Delegation(address delegate,bytes32 authority,Caveat[] caveats)Invocation(Transaction transaction,SignedDelegation[] authority)ReplayProtection(uint nonce,uint queue)SignedDelegation(Delegation delegation,bytes signature)Transaction(address to,uint256 gasLimit,bytes data)\\\"\\n);\\n\\nstruct SignedInvocation {\\n  Invocations invocations;\\n  bytes signature;\\n}\\n\\nbytes32 constant SIGNEDINVOCATION_TYPEHASH = keccak256(\\n  \\\"SignedInvocation(Invocations invocations,bytes signature)Caveat(address enforcer,bytes terms)Delegation(address delegate,bytes32 authority,Caveat[] caveats)Invocation(Transaction transaction,SignedDelegation[] authority)Invocations(Invocation[] batch,ReplayProtection replayProtection)ReplayProtection(uint nonce,uint queue)SignedDelegation(Delegation delegation,bytes signature)Transaction(address to,uint256 gasLimit,bytes data)\\\"\\n);\\n\\nstruct Transaction {\\n  address to;\\n  uint256 gasLimit;\\n  bytes data;\\n}\\n\\nbytes32 constant TRANSACTION_TYPEHASH = keccak256(\\n  \\\"Transaction(address to,uint256 gasLimit,bytes data)\\\"\\n);\\n\\nstruct ReplayProtection {\\n  uint256 nonce;\\n  uint256 queue;\\n}\\n\\nbytes32 constant REPLAYPROTECTION_TYPEHASH = keccak256(\\\"ReplayProtection(uint nonce,uint queue)\\\");\\n\\nstruct Delegation {\\n  address delegate;\\n  bytes32 authority;\\n  Caveat[] caveats;\\n}\\n\\nbytes32 constant DELEGATION_TYPEHASH = keccak256(\\n  \\\"Delegation(address delegate,bytes32 authority,Caveat[] caveats)Caveat(address enforcer,bytes terms)\\\"\\n);\\n\\nstruct Caveat {\\n  address enforcer;\\n  bytes terms;\\n}\\n\\nbytes32 constant CAVEAT_TYPEHASH = keccak256(\\\"Caveat(address enforcer,bytes terms)\\\");\\n\\nstruct SignedDelegation {\\n  Delegation delegation;\\n  bytes signature;\\n}\\n\\nbytes32 constant SIGNEDDELEGATION_TYPEHASH = keccak256(\\n  \\\"SignedDelegation(Delegation delegation,bytes signature)Caveat(address enforcer,bytes terms)Delegation(address delegate,bytes32 authority,Caveat[] caveats)\\\"\\n);\\n\\n// END EIP712 AUTOGENERATED SETUP\\n\\ncontract EIP712Decoder is ECRecovery {\\n  // BEGIN EIP712 AUTOGENERATED BODY. See scripts/typesToCode.js\\n\\n  // function GET_EIP712DOMAIN_PACKETHASH(EIP712Domain memory _input)\\n  //     public\\n  //     pure\\n  //     returns (bytes32)\\n  // {\\n  //     bytes memory encoded = abi.encode(\\n  //         EIP712DOMAIN_TYPEHASH,\\n  //         _input.name,\\n  //         _input.version,\\n  //         _input.chainId,\\n  //         _input.verifyingContract\\n  //     );\\n\\n  //     return keccak256(encoded);\\n  // }\\n\\n  function GET_INVOCATION_PACKETHASH(Invocation memory _input) public pure returns (bytes32) {\\n    bytes memory encoded = abi.encode(\\n      INVOCATION_TYPEHASH,\\n      GET_TRANSACTION_PACKETHASH(_input.transaction),\\n      GET_SIGNEDDELEGATION_ARRAY_PACKETHASH(_input.authority)\\n    );\\n\\n    return keccak256(encoded);\\n  }\\n\\n  function GET_SIGNEDDELEGATION_ARRAY_PACKETHASH(SignedDelegation[] memory _input)\\n    public\\n    pure\\n    returns (bytes32)\\n  {\\n    bytes memory encoded;\\n    for (uint256 i = 0; i < _input.length; i++) {\\n      encoded = bytes.concat(encoded, GET_SIGNEDDELEGATION_PACKETHASH(_input[i]));\\n    }\\n\\n    bytes32 hash = keccak256(encoded);\\n    return hash;\\n  }\\n\\n  function GET_INVOCATIONS_PACKETHASH(Invocations memory _input) public pure returns (bytes32) {\\n    bytes memory encoded = abi.encode(\\n      INVOCATIONS_TYPEHASH,\\n      GET_INVOCATION_ARRAY_PACKETHASH(_input.batch),\\n      GET_REPLAYPROTECTION_PACKETHASH(_input.replayProtection)\\n    );\\n\\n    return keccak256(encoded);\\n  }\\n\\n  function GET_INVOCATION_ARRAY_PACKETHASH(Invocation[] memory _input)\\n    public\\n    pure\\n    returns (bytes32)\\n  {\\n    bytes memory encoded;\\n    for (uint256 i = 0; i < _input.length; i++) {\\n      encoded = bytes.concat(encoded, GET_INVOCATION_PACKETHASH(_input[i]));\\n    }\\n\\n    bytes32 hash = keccak256(encoded);\\n    return hash;\\n  }\\n\\n  // function GET_SIGNEDINVOCATION_PACKETHASH(SignedInvocation memory _input)\\n  //     public\\n  //     pure\\n  //     returns (bytes32)\\n  // {\\n  //     bytes memory encoded = abi.encode(\\n  //         SIGNEDINVOCATION_TYPEHASH,\\n  //         GET_INVOCATIONS_PACKETHASH(_input.invocations),\\n  //         keccak256(_input.signature)\\n  //     );\\n\\n  //     return keccak256(encoded);\\n  // }\\n\\n  function GET_TRANSACTION_PACKETHASH(Transaction memory _input) public pure returns (bytes32) {\\n    bytes memory encoded = abi.encode(\\n      TRANSACTION_TYPEHASH,\\n      _input.to,\\n      _input.gasLimit,\\n      keccak256(_input.data)\\n    );\\n\\n    return keccak256(encoded);\\n  }\\n\\n  function GET_REPLAYPROTECTION_PACKETHASH(ReplayProtection memory _input)\\n    public\\n    pure\\n    returns (bytes32)\\n  {\\n    bytes memory encoded = abi.encode(REPLAYPROTECTION_TYPEHASH, _input.nonce, _input.queue);\\n\\n    return keccak256(encoded);\\n  }\\n\\n  function GET_DELEGATION_PACKETHASH(Delegation memory _input) public pure returns (bytes32) {\\n    bytes memory encoded = abi.encode(\\n      DELEGATION_TYPEHASH,\\n      _input.delegate,\\n      _input.authority,\\n      GET_CAVEAT_ARRAY_PACKETHASH(_input.caveats)\\n    );\\n\\n    return keccak256(encoded);\\n  }\\n\\n  function GET_CAVEAT_ARRAY_PACKETHASH(Caveat[] memory _input) public pure returns (bytes32) {\\n    bytes memory encoded;\\n    for (uint256 i = 0; i < _input.length; i++) {\\n      encoded = bytes.concat(encoded, GET_CAVEAT_PACKETHASH(_input[i]));\\n    }\\n\\n    bytes32 hash = keccak256(encoded);\\n    return hash;\\n  }\\n\\n  function GET_CAVEAT_PACKETHASH(Caveat memory _input) public pure returns (bytes32) {\\n    bytes memory encoded = abi.encode(CAVEAT_TYPEHASH, _input.enforcer, keccak256(_input.terms));\\n\\n    return keccak256(encoded);\\n  }\\n\\n  function GET_SIGNEDDELEGATION_PACKETHASH(SignedDelegation memory _input)\\n    public\\n    pure\\n    returns (bytes32)\\n  {\\n    bytes memory encoded = abi.encode(\\n      SIGNEDDELEGATION_TYPEHASH,\\n      GET_DELEGATION_PACKETHASH(_input.delegation),\\n      keccak256(_input.signature)\\n    );\\n\\n    return keccak256(encoded);\\n  }\\n}\\n\",\"keccak256\":\"0x09bb9d4a42acaa94d6b378119e0ae8a110ce9a4eb10fad15c556df4e3d7e0f87\",\"license\":\"MIT\"},\"contracts/Delegatable/interfaces/IDelegatable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"../TypesAndDecoders.sol\\\";\\n\\ninterface IDelegatable {\\n  /**\\n   * @notice Allows a smart contract to submit a batch of invocations for processing, allowing itself to be the delegate.\\n   * @param batch Invocation[] - The batch of invocations to process.\\n   * @return success bool - Whether the batch of invocations was successfully processed.\\n   */\\n  function contractInvoke(Invocation[] calldata batch) external returns (bool);\\n\\n  /**\\n   * @notice Allows anyone to submit a batch of signed invocations for processing.\\n   * @param signedInvocations SignedInvocation[] - The batch of signed invocations to process.\\n   * @return success bool - Whether the batch of invocations was successfully processed.\\n   */\\n  function invoke(SignedInvocation[] calldata signedInvocations) external returns (bool success);\\n\\n  /**\\n   * @notice Returns the typehash for this contract's delegation signatures.\\n   * @param delegation Delegation - The delegation to get the type of\\n   * @return bytes32 - The type of the delegation\\n   */\\n  function getDelegationTypedDataHash(Delegation memory delegation) external view returns (bytes32);\\n\\n  /**\\n   * @notice Returns the typehash for this contract's invocation signatures.\\n   * @param invocations Invocations\\n   * @return bytes32 - The type of the Invocations\\n   */\\n  function getInvocationsTypedDataHash(Invocations memory invocations)\\n    external\\n    view\\n    returns (bytes32);\\n\\n  function getEIP712DomainHash(\\n    string memory contractName,\\n    string memory version,\\n    uint256 chainId,\\n    address verifyingContract\\n  ) external pure returns (bytes32);\\n\\n  /**\\n   * @notice Verifies that the given invocation is valid.\\n   * @param signedInvocation - The signed invocation to verify\\n   * @return address - The address of the account authorizing this invocation to act on its behalf.\\n   */\\n  function verifyInvocationSignature(SignedInvocation memory signedInvocation)\\n    external\\n    view\\n    returns (address);\\n\\n  /**\\n   * @notice Verifies that the given delegation is valid.\\n   * @param signedDelegation - The delegation to verify\\n   * @return address - The address of the account authorizing this delegation to act on its behalf.\\n   */\\n  function verifyDelegationSignature(SignedDelegation memory signedDelegation)\\n    external\\n    view\\n    returns (address);\\n}\\n\",\"keccak256\":\"0x042dda1b3608bcd97f395a049256cc3b8a76cf24882ad7ab3d715dca3217fc1a\",\"license\":\"MIT\"},\"contracts/Delegatable/libraries/ECRecovery.sol\":{\"content\":\"pragma solidity 0.8.15;\\n\\n// SPDX-License-Identifier: MIT\\n\\ncontract ECRecovery {\\n  /**\\n   * @dev Recover signer address from a message by using their signature\\n   * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\\n   * @param sig bytes signature, the signature is generated using web3.eth.sign()\\n   */\\n  function recover(bytes32 hash, bytes memory sig) internal pure returns (address) {\\n    bytes32 r;\\n    bytes32 s;\\n    uint8 v;\\n\\n    //Check the signature length\\n    if (sig.length != 65) {\\n      return (address(0));\\n    }\\n\\n    // Divide the signature in r, s and v variables\\n    assembly {\\n      r := mload(add(sig, 32))\\n      s := mload(add(sig, 64))\\n      v := byte(0, mload(add(sig, 96)))\\n    }\\n    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\\n    if (v < 27) {\\n      v += 27;\\n    }\\n\\n    // If the version is correct return the signer address\\n    if (v != 27 && v != 28) {\\n      return (address(0));\\n    } else {\\n      return ecrecover(hash, v, r, s);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x3c18ce1746bcf865f8e0ef0172178fbeda5a0a914c2b52b1c07bafab2342aae1\",\"license\":\"MIT\"},\"contracts/DelegatableERC721Controller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport { Context } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { Delegatable, DelegatableCore } from \\\"./Delegatable/Delegatable.sol\\\";\\n\\ninterface IERC721Mintable {\\n  function mint(address to) external;\\n\\n  function burn(uint256 tokenId) external;\\n}\\n\\ncontract DelegatableERC721Controller is AccessControl, Delegatable {\\n  address public erc721TokenAddress;\\n  bytes32 public constant CONTROLLER_ROLE = keccak256(\\\"CONTROLLER_ROLE\\\");\\n\\n  constructor(address _erc721TokenAddress, address admin, address controller)\\n    Delegatable(\\\"DelegatableERC721Controller\\\", \\\"1\\\")\\n  {\\n    _setupRole(DEFAULT_ADMIN_ROLE, admin);\\n    _setupRole(CONTROLLER_ROLE, controller);\\n    erc721TokenAddress = _erc721TokenAddress;\\n  }\\n\\n  /* ===================================================================================== */\\n  /* External Functions                                                                    */\\n  /* ===================================================================================== */\\n\\n  function controllerMint(address account) external virtual {\\n    require(hasRole(CONTROLLER_ROLE, _msgSender()), \\\"DelegatableERC721Controller:unauthorized\\\");\\n    IERC721Mintable(erc721TokenAddress).mint(account);\\n  }\\n\\n  function controllerBurn(uint256 tokenId) external virtual {\\n    require(hasRole(CONTROLLER_ROLE, _msgSender()), \\\"DelegatableERC721Controller:unauthorized\\\");\\n    IERC721Mintable(erc721TokenAddress).burn(tokenId);\\n  }\\n\\n  function grantMinterRole(address _minter) external virtual {\\n    require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \\\"DelegatableERC721Controller:unauthorized\\\");\\n    grantRole(CONTROLLER_ROLE, _minter);\\n  }\\n\\n  function revokeMinter(address _minter) external virtual {\\n    require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \\\"DelegatableERC721Controller:unauthorized\\\");\\n    revokeRole(CONTROLLER_ROLE, _minter);\\n  }\\n\\n  function transferAdmin(address account) external {\\n    grantRole(DEFAULT_ADMIN_ROLE, account);\\n    renounceRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n  }\\n\\n  /* ===================================================================================== */\\n  /* Internal Functions                                                                    */\\n  /* ===================================================================================== */\\n\\n  function _msgSender()\\n    internal\\n    view\\n    virtual\\n    override(Context, DelegatableCore)\\n    returns (address sender)\\n  {\\n    if (msg.sender == address(this)) {\\n      bytes memory array = msg.data;\\n      uint256 index = msg.data.length;\\n      assembly {\\n        sender := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\n      }\\n    } else {\\n      sender = msg.sender;\\n    }\\n    return sender;\\n  }\\n}\\n\",\"keccak256\":\"0x6c3ab5a76801afbbea2eaf0f81391d11146bbcb38e0a354279375cf895b8068d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620028b6380380620028b68339810160408190526200003491620002a8565b6040518060400160405280601b81526020017f44656c6567617461626c65455243373231436f6e74726f6c6c65720000000000815250604051806040016040528060018152602001603160f81b8152506200009882824630620000ff60201b60201c565b60805250620000ab90506000836200017b565b620000d77f7b765e0e932d348852a6f810bfa1ab891e259123f02db8cdcde614c570223357826200017b565b5050600280546001600160a01b0319166001600160a01b0392909216919091179055620002f2565b8351602094850120835193850193909320604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f8188015280820195909552606085019190915260808401929092526001600160a01b031660a0808401919091528151808403909101815260c09092019052805191012090565b6200018782826200018b565b5050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000187576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620001e96200022d565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60003033036200028557600080368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b03169150620002889050565b50335b90565b80516001600160a01b0381168114620002a357600080fd5b919050565b600080600060608486031215620002be57600080fd5b620002c9846200028b565b9250620002d9602085016200028b565b9150620002e9604085016200028b565b90509250925092565b60805161259a6200031c60003960008181610543015281816109d80152610c4f015261259a6000f3fe608060405234801561001057600080fd5b50600436106101fb5760003560e01c80637234eefe1161011a57806399aabc9e116100ad578063cfbd48851161007c578063cfbd48851461047b578063d327c1eb1461048e578063d547741f14610518578063df241cb91461052b578063dfe86ac51461053e57600080fd5b806399aabc9e1461043a578063a217fddf1461044d578063a2e01f7514610455578063caced6c51461046857600080fd5b806389535803116100e957806389535803146103b35780638a04499e146103e957806391d148541461041457806397182ed61461042757600080fd5b80637234eefe14610367578063736f7ce71461037a57806375829def1461038d5780637b577b58146103a057600080fd5b806336568abe116101925780635cf1b24a116101615780635cf1b24a1461031b57806360b6d7681461032e5780636c2b1253146103415780636f9658031461035457600080fd5b806336568abe146102cf5780633a481821146102e25780633dd1eb61146102f55780635c6d9f0c1461030857600080fd5b806326ff5314116101ce57806326ff5314146102815780632f2ff15d146102965780632f52a2fd146102a95780632fad7efc146102bc57600080fd5b806301ffc9a71461020057806308aaf6b014610228578063092c5b3b14610249578063248a9ca31461025e575b600080fd5b61021361020e3660046117c0565b610565565b60405190151581526020015b60405180910390f35b61023b61023636600461196b565b61059c565b60405190815260200161021f565b61023b60008051602061254583398151915281565b61023b61026c36600461199f565b60009081526020819052604090206001015490565b61029461028f36600461199f565b61061c565b005b6102946102a43660046119b8565b6106bd565b61023b6102b7366004611af3565b6106e7565b6102136102ca366004611b72565b610752565b6102946102dd3660046119b8565b610819565b61023b6102f0366004611dcb565b6108a7565b610294610303366004611dff565b61091e565b610213610316366004611b72565b610962565b61023b610329366004611e1a565b610976565b61023b61033c366004611ed7565b6109d3565b61023b61034f366004611f0b565b610a23565b61023b610362366004611f3f565b610a80565b61023b610375366004611ed7565b610ad1565b61023b610388366004611f5b565b610b0f565b61029461039b366004611dff565b610b77565b61023b6103ae366004611f8f565b610b8f565b61023b6103c1366004611fc3565b6001600160a01b03919091166000908152600160209081526040808320938352929052205490565b6103fc6103f7366004611f0b565b610bf7565b6040516001600160a01b03909116815260200161021f565b6102136104223660046119b8565b610c21565b61023b610435366004611af3565b610c4a565b610294610448366004611dff565b610c77565b61023b600081565b61023b610463366004611fed565b610cdf565b6103fc610476366004612060565b610d4b565b610294610489366004611dff565b610d75565b61023b61049c366004612094565b8351602094850120835193850193909320604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f8188015280820195909552606085019190915260808401929092526001600160a01b031660a0808401919091528151808403909101815260c09092019052805191012090565b6102946105263660046119b8565b610db2565b6002546103fc906001600160a01b031681565b61023b7f000000000000000000000000000000000000000000000000000000000000000081565b60006001600160e01b03198216637965db0b60e01b148061059657506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000807f80ad7e1b04ee6d994a125f4714ca0720908bd80ed16063ec8aee4b88e9253e2d83600001518460200151805190602001206040516020016105fd939291909283526001600160a01b03919091166020830152604082015260600190565b60408051601f1981840301815291905280516020909101209392505050565b610636600080516020612545833981519152610422610dd7565b61065b5760405162461bcd60e51b815260040161065290612111565b60405180910390fd5b600254604051630852cd8d60e31b8152600481018390526001600160a01b03909116906342966c68906024015b600060405180830381600087803b1580156106a257600080fd5b505af11580156106b6573d6000803e3d6000fd5b5050505050565b6000828152602081905260409020600101546106d881610e33565b6106e28383610e44565b505050565b6000807f409f5114779a253e700d775d7845e6efc1e83685ac59868d2df3d4de51c7d621836000015184602001516107228660400151610b8f565b6040805160208101959095526001600160a01b03909316928401929092526060830152608082015260a0016105fd565b6000805b82811015610812573684848381811061077157610771612159565b9050602002810190610783919061216f565b905060006107936104768361218f565b90506107df818787868181106107ab576107ab612159565b90506020028101906107bd919061216f565b6107c7908061219b565b6020018036038101906107da9190611f3f565b610ec9565b6107fc6107ec838061219b565b6107f690806121b1565b83610f85565b505050808061080a90612210565b915050610756565b5092915050565b610821610dd7565b6001600160a01b0316816001600160a01b0316146108995760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610652565b6108a38282611338565b5050565b6000606060005b835181101561090f57816108da8583815181106108cd576108cd612159565b6020026020010151610976565b6040516020016108eb929190612259565b6040516020818303038152906040529150808061090790612210565b9150506108ae565b50805160209091012092915050565b61092b6000610422610dd7565b6109475760405162461bcd60e51b815260040161065290612111565b61095f600080516020612545833981519152826106bd565b50565b600061096f838333610f85565b9392505050565b6000807fd97dd99b404d177890f06a8f0fc8e5ed0333fb2ebb6684360709066e8984f5946109a78460000151610cdf565b6109b48560200151610b0f565b60408051602081019490945283019190915260608201526080016105fd565b6000807f0000000000000000000000000000000000000000000000000000000000000000610a0084610ad1565b60405161190160f01b6020820152602281019290925260428201526062016105fd565b6000807f3c36a06e1d288b0f94f565588317a46ad11bc3c96992109f9a2365a2737259a7610a5484600001516106e7565b6020808601518051908201206040516105fd949392019283526020830191909152604082015260600190565b6000807fe8d3d963b33868fb116316bc3fd55e8f49123f30e4418f71e140d54b7cd3b2b9836000015184602001516040516020016105fd939291909283526020830191909152604082015260600190565b6000807f08c69a206c06f5334b35ceb1186181a713b21aff02cf66285f375084fbef2eb8610b0284600001516108a7565b6109b48560200151610a80565b6000606060005b835181101561090f5781610b42858381518110610b3557610b35612159565b6020026020010151610a23565b604051602001610b53929190612259565b60405160208183030381529060405291508080610b6f90612210565b915050610b16565b610b826000826106bd565b61095f60006102dd610dd7565b6000606060005b835181101561090f5781610bc2858381518110610bb557610bb5612159565b602002602001015161059c565b604051602001610bd3929190612259565b60405160208183030381529060405291508080610bef90612210565b915050610b96565b805160009081610c0682610c4a565b90506000610c188286602001516113bb565b95945050505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6000807f0000000000000000000000000000000000000000000000000000000000000000610a00846106e7565b610c91600080516020612545833981519152610422610dd7565b610cad5760405162461bcd60e51b815260040161065290612111565b6002546040516335313c2160e11b81526001600160a01b03838116600483015290911690636a62784290602401610688565b6000807fb16dfdb3b8fa033fe30ac976cd4a50ad256b6811c80d90fcd0b323eec190047d836000015184602001518560400151805190602001206040516020016105fd94939291909384526001600160a01b039290921660208401526040830152606082015260800190565b600080610d5b83600001516109d3565b90506000610d6d8285602001516113bb565b949350505050565b610d826000610422610dd7565b610d9e5760405162461bcd60e51b815260040161065290612111565b61095f600080516020612545833981519152825b600082815260208190526040902060010154610dcd81610e33565b6106e28383611338565b6000303303610e2d57600080368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b03169150610e309050565b50335b90565b61095f81610e3f610dd7565b611492565b610e4e8282610c21565b6108a3576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610e85610dd7565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60208082015182516001600160a01b0385166000908152600180855260408083208584529095529390205491929091610f019161227b565b8114610f5b5760405162461bcd60e51b815260206004820152602360248201527f44656c6567617461626c65436f72653a6e6f6e6365322d6f75742d6f662d6f726044820152623232b960e91b6064820152608401610652565b6001600160a01b039093166000908152600160209081526040808320938352929052209190915550565b6000805b83811015611330576000858583818110610fa557610fa5612159565b9050602002810190610fb7919061216f565b610fc090612293565b9050600080826020015151600003610fd85750849050805b6000805b8460200151518110156112735760008560200151828151811061100157611001612159565b60200260200101519050600061101682610bf7565b905082600003611027578095508594505b846001600160a01b0316816001600160a01b03161461109a5760405162461bcd60e51b815260206004820152602960248201527f44656c6567617461626c65436f72653a696e76616c69642d64656c656761746960448201526837b716b9b4b3b732b960b91b6064820152608401610652565b8151602081015185146111095760405162461bcd60e51b815260206004820152603160248201527f44656c6567617461626c65436f72653a696e76616c69642d617574686f726974604482015270792d64656c65676174696f6e2d6c696e6b60781b6064820152608401610652565b600061111484610a23565b905060005b8260400151518161ffff16101561125657600083604001518261ffff168151811061114657611146612159565b60200260200101516000015190506000816001600160a01b0316635068de4c86604001518561ffff168151811061117f5761117f612159565b6020026020010151602001518e60000151876040518463ffffffff1660e01b81526004016111af939291906122cb565b6020604051808303816000875af11580156111ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f29190612327565b9050806112415760405162461bcd60e51b815260206004820152601f60248201527f44656c6567617461626c65436f72653a6361766561742d72656a6563746564006044820152606401610652565b5050808061124e90612349565b915050611119565b5090519550935082915061126b905081612210565b915050610fdc565b50835180516001600160a01b031630146112e15760405162461bcd60e51b815260206004820152602960248201527f44656c6567617461626c65436f72653a696e76616c69642d696e766f636174696044820152681bdb8b5d185c99d95d60ba1b6064820152608401610652565b6112f9816000015182604001518360200151876114f6565b9650866113185760405162461bcd60e51b81526004016106529061236a565b5050505050808061132890612210565b915050610f89565b509392505050565b6113428282610c21565b156108a3576000828152602081815260408083206001600160a01b03851684529091529020805460ff19169055611377610dd7565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b60008060008084516041146113d65760009350505050610596565b50505060208201516040830151606084015160001a601b811015611402576113ff601b826123ab565b90505b8060ff16601b1415801561141a57508060ff16601c14155b1561142b5760009350505050610596565b60408051600081526020810180835288905260ff831691810191909152606081018490526080810183905260019060a0016020604051602081039080840390855afa15801561147e573d6000803e3d6000fd5b505050602060405103519350505050610596565b61149c8282610c21565b6108a3576114b4816001600160a01b031660146115d6565b6114bf8360206115d6565b6040516020016114d09291906123d0565b60408051601f198184030181529082905262461bcd60e51b825261065291600401612445565b600080848360405160200161150c929190612458565b60405160208183030381529060405290506060866001600160a01b03168583604051611538919061248f565b60006040518083038160008787f1925050503d8060008114611576576040519150601f19603f3d011682016040523d82523d6000602084013e61157b565b606091505b509093509050826115cc578051156115b457600061159882611771565b90508060405162461bcd60e51b81526004016106529190612445565b60405162461bcd60e51b81526004016106529061236a565b5050949350505050565b606060006115e58360026124a1565b6115f090600261227b565b6001600160401b03811115611607576116076117ea565b6040519080825280601f01601f191660200182016040528015611631576020820181803683370190505b509050600360fc1b8160008151811061164c5761164c612159565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061167b5761167b612159565b60200101906001600160f81b031916908160001a905350600061169f8460026124a1565b6116aa90600161227b565b90505b6001811115611722576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106116de576116de612159565b1a60f81b8282815181106116f4576116f4612159565b60200101906001600160f81b031916908160001a90535060049490941c9361171b816124c0565b90506116ad565b50831561096f5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610652565b80516060906044811015611795575050604080516020810190915260008152919050565b6004830180516003198301825290936117b790838101602001906024016124d7565b93525090919050565b6000602082840312156117d257600080fd5b81356001600160e01b03198116811461096f57600080fd5b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b0381118282101715611822576118226117ea565b60405290565b604051606081016001600160401b0381118282101715611822576118226117ea565b604051601f8201601f191681016001600160401b0381118282101715611872576118726117ea565b604052919050565b80356001600160a01b038116811461189157600080fd5b919050565b60006001600160401b038211156118af576118af6117ea565b50601f01601f191660200190565b600082601f8301126118ce57600080fd5b81356118e16118dc82611896565b61184a565b8181528460208386010111156118f657600080fd5b816020850160208301376000918101602001919091529392505050565b60006040828403121561192557600080fd5b61192d611800565b90506119388261187a565b815260208201356001600160401b0381111561195357600080fd5b61195f848285016118bd565b60208301525092915050565b60006020828403121561197d57600080fd5b81356001600160401b0381111561199357600080fd5b610d6d84828501611913565b6000602082840312156119b157600080fd5b5035919050565b600080604083850312156119cb57600080fd5b823591506119db6020840161187a565b90509250929050565b60006001600160401b038211156119fd576119fd6117ea565b5060051b60200190565b600082601f830112611a1857600080fd5b81356020611a286118dc836119e4565b82815260059290921b84018101918181019086841115611a4757600080fd5b8286015b84811015611a865780356001600160401b03811115611a6a5760008081fd5b611a788986838b0101611913565b845250918301918301611a4b565b509695505050505050565b600060608284031215611aa357600080fd5b611aab611828565b9050611ab68261187a565b81526020820135602082015260408201356001600160401b03811115611adb57600080fd5b611ae784828501611a07565b60408301525092915050565b600060208284031215611b0557600080fd5b81356001600160401b03811115611b1b57600080fd5b610d6d84828501611a91565b60008083601f840112611b3957600080fd5b5081356001600160401b03811115611b5057600080fd5b6020830191508360208260051b8501011115611b6b57600080fd5b9250929050565b60008060208385031215611b8557600080fd5b82356001600160401b03811115611b9b57600080fd5b611ba785828601611b27565b90969095509350505050565b600060608284031215611bc557600080fd5b611bcd611828565b9050611bd88261187a565b81526020820135602082015260408201356001600160401b03811115611bfd57600080fd5b611ae7848285016118bd565b600060408284031215611c1b57600080fd5b611c23611800565b905081356001600160401b0380821115611c3c57600080fd5b611c4885838601611a91565b83526020840135915080821115611c5e57600080fd5b5061195f848285016118bd565b600082601f830112611c7c57600080fd5b81356020611c8c6118dc836119e4565b82815260059290921b84018101918181019086841115611cab57600080fd5b8286015b84811015611a865780356001600160401b03811115611cce5760008081fd5b611cdc8986838b0101611c09565b845250918301918301611caf565b600060408284031215611cfc57600080fd5b611d04611800565b905081356001600160401b0380821115611d1d57600080fd5b611d2985838601611bb3565b83526020840135915080821115611d3f57600080fd5b5061195f84828501611c6b565b600082601f830112611d5d57600080fd5b81356020611d6d6118dc836119e4565b82815260059290921b84018101918181019086841115611d8c57600080fd5b8286015b84811015611a865780356001600160401b03811115611daf5760008081fd5b611dbd8986838b0101611cea565b845250918301918301611d90565b600060208284031215611ddd57600080fd5b81356001600160401b03811115611df357600080fd5b610d6d84828501611d4c565b600060208284031215611e1157600080fd5b61096f8261187a565b600060208284031215611e2c57600080fd5b81356001600160401b03811115611e4257600080fd5b610d6d84828501611cea565b600060408284031215611e6057600080fd5b611e68611800565b9050813581526020820135602082015292915050565b600060608284031215611e9057600080fd5b611e98611800565b905081356001600160401b03811115611eb057600080fd5b611ebc84828501611d4c565b825250611ecc8360208401611e4e565b602082015292915050565b600060208284031215611ee957600080fd5b81356001600160401b03811115611eff57600080fd5b610d6d84828501611e7e565b600060208284031215611f1d57600080fd5b81356001600160401b03811115611f3357600080fd5b610d6d84828501611c09565b600060408284031215611f5157600080fd5b61096f8383611e4e565b600060208284031215611f6d57600080fd5b81356001600160401b03811115611f8357600080fd5b610d6d84828501611c6b565b600060208284031215611fa157600080fd5b81356001600160401b03811115611fb757600080fd5b610d6d84828501611a07565b60008060408385031215611fd657600080fd5b611fdf8361187a565b946020939093013593505050565b600060208284031215611fff57600080fd5b81356001600160401b0381111561201557600080fd5b610d6d84828501611bb3565b60006040828403121561203357600080fd5b61203b611800565b905081356001600160401b038082111561205457600080fd5b611c4885838601611e7e565b60006020828403121561207257600080fd5b81356001600160401b0381111561208857600080fd5b610d6d84828501612021565b600080600080608085870312156120aa57600080fd5b84356001600160401b03808211156120c157600080fd5b6120cd888389016118bd565b955060208701359150808211156120e357600080fd5b506120f0878288016118bd565b935050604085013591506121066060860161187a565b905092959194509250565b60208082526028908201527f44656c6567617461626c65455243373231436f6e74726f6c6c65723a756e61756040820152671d1a1bdc9a5e995960c21b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b60008235603e1983360301811261218557600080fd5b9190910192915050565b60006105963683612021565b60008235605e1983360301811261218557600080fd5b6000808335601e198436030181126121c857600080fd5b8301803591506001600160401b038211156121e257600080fd5b6020019150600581901b3603821315611b6b57600080fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612222576122226121fa565b5060010190565b60005b8381101561224457818101518382015260200161222c565b83811115612253576000848401525b50505050565b6000835161226b818460208801612229565b9190910191825250602001919050565b6000821982111561228e5761228e6121fa565b500190565b60006105963683611cea565b600081518084526122b7816020860160208601612229565b601f01601f19169290920160200192915050565b6060815260006122de606083018661229f565b828103602084015260018060a01b03855116815260208501516020820152604085015160606040830152612315606083018261229f565b92505050826040830152949350505050565b60006020828403121561233957600080fd5b8151801515811461096f57600080fd5b600061ffff808316818103612360576123606121fa565b6001019392505050565b60208082526021908201527f44656c6567617461626c65436f72653a3a657865637574696f6e2d6661696c656040820152601960fa1b606082015260800190565b600060ff821660ff84168060ff038211156123c8576123c86121fa565b019392505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612408816017850160208801612229565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612439816028840160208801612229565b01602801949350505050565b60208152600061096f602083018461229f565b6000835161246a818460208801612229565b60609390931b6bffffffffffffffffffffffff19169190920190815260140192915050565b60008251612185818460208701612229565b60008160001904831182151516156124bb576124bb6121fa565b500290565b6000816124cf576124cf6121fa565b506000190190565b6000602082840312156124e957600080fd5b81516001600160401b038111156124ff57600080fd5b8201601f8101841361251057600080fd5b805161251e6118dc82611896565b81815285602083850101111561253357600080fd5b610c1882602083016020860161222956fe7b765e0e932d348852a6f810bfa1ab891e259123f02db8cdcde614c570223357a26469706673582212201d1772af32bc706ad02cfbd111d8127a552b74c1197c2a18e1cc082cc52cf1cb64736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101fb5760003560e01c80637234eefe1161011a57806399aabc9e116100ad578063cfbd48851161007c578063cfbd48851461047b578063d327c1eb1461048e578063d547741f14610518578063df241cb91461052b578063dfe86ac51461053e57600080fd5b806399aabc9e1461043a578063a217fddf1461044d578063a2e01f7514610455578063caced6c51461046857600080fd5b806389535803116100e957806389535803146103b35780638a04499e146103e957806391d148541461041457806397182ed61461042757600080fd5b80637234eefe14610367578063736f7ce71461037a57806375829def1461038d5780637b577b58146103a057600080fd5b806336568abe116101925780635cf1b24a116101615780635cf1b24a1461031b57806360b6d7681461032e5780636c2b1253146103415780636f9658031461035457600080fd5b806336568abe146102cf5780633a481821146102e25780633dd1eb61146102f55780635c6d9f0c1461030857600080fd5b806326ff5314116101ce57806326ff5314146102815780632f2ff15d146102965780632f52a2fd146102a95780632fad7efc146102bc57600080fd5b806301ffc9a71461020057806308aaf6b014610228578063092c5b3b14610249578063248a9ca31461025e575b600080fd5b61021361020e3660046117c0565b610565565b60405190151581526020015b60405180910390f35b61023b61023636600461196b565b61059c565b60405190815260200161021f565b61023b60008051602061254583398151915281565b61023b61026c36600461199f565b60009081526020819052604090206001015490565b61029461028f36600461199f565b61061c565b005b6102946102a43660046119b8565b6106bd565b61023b6102b7366004611af3565b6106e7565b6102136102ca366004611b72565b610752565b6102946102dd3660046119b8565b610819565b61023b6102f0366004611dcb565b6108a7565b610294610303366004611dff565b61091e565b610213610316366004611b72565b610962565b61023b610329366004611e1a565b610976565b61023b61033c366004611ed7565b6109d3565b61023b61034f366004611f0b565b610a23565b61023b610362366004611f3f565b610a80565b61023b610375366004611ed7565b610ad1565b61023b610388366004611f5b565b610b0f565b61029461039b366004611dff565b610b77565b61023b6103ae366004611f8f565b610b8f565b61023b6103c1366004611fc3565b6001600160a01b03919091166000908152600160209081526040808320938352929052205490565b6103fc6103f7366004611f0b565b610bf7565b6040516001600160a01b03909116815260200161021f565b6102136104223660046119b8565b610c21565b61023b610435366004611af3565b610c4a565b610294610448366004611dff565b610c77565b61023b600081565b61023b610463366004611fed565b610cdf565b6103fc610476366004612060565b610d4b565b610294610489366004611dff565b610d75565b61023b61049c366004612094565b8351602094850120835193850193909320604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f8188015280820195909552606085019190915260808401929092526001600160a01b031660a0808401919091528151808403909101815260c09092019052805191012090565b6102946105263660046119b8565b610db2565b6002546103fc906001600160a01b031681565b61023b7f000000000000000000000000000000000000000000000000000000000000000081565b60006001600160e01b03198216637965db0b60e01b148061059657506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000807f80ad7e1b04ee6d994a125f4714ca0720908bd80ed16063ec8aee4b88e9253e2d83600001518460200151805190602001206040516020016105fd939291909283526001600160a01b03919091166020830152604082015260600190565b60408051601f1981840301815291905280516020909101209392505050565b610636600080516020612545833981519152610422610dd7565b61065b5760405162461bcd60e51b815260040161065290612111565b60405180910390fd5b600254604051630852cd8d60e31b8152600481018390526001600160a01b03909116906342966c68906024015b600060405180830381600087803b1580156106a257600080fd5b505af11580156106b6573d6000803e3d6000fd5b5050505050565b6000828152602081905260409020600101546106d881610e33565b6106e28383610e44565b505050565b6000807f409f5114779a253e700d775d7845e6efc1e83685ac59868d2df3d4de51c7d621836000015184602001516107228660400151610b8f565b6040805160208101959095526001600160a01b03909316928401929092526060830152608082015260a0016105fd565b6000805b82811015610812573684848381811061077157610771612159565b9050602002810190610783919061216f565b905060006107936104768361218f565b90506107df818787868181106107ab576107ab612159565b90506020028101906107bd919061216f565b6107c7908061219b565b6020018036038101906107da9190611f3f565b610ec9565b6107fc6107ec838061219b565b6107f690806121b1565b83610f85565b505050808061080a90612210565b915050610756565b5092915050565b610821610dd7565b6001600160a01b0316816001600160a01b0316146108995760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610652565b6108a38282611338565b5050565b6000606060005b835181101561090f57816108da8583815181106108cd576108cd612159565b6020026020010151610976565b6040516020016108eb929190612259565b6040516020818303038152906040529150808061090790612210565b9150506108ae565b50805160209091012092915050565b61092b6000610422610dd7565b6109475760405162461bcd60e51b815260040161065290612111565b61095f600080516020612545833981519152826106bd565b50565b600061096f838333610f85565b9392505050565b6000807fd97dd99b404d177890f06a8f0fc8e5ed0333fb2ebb6684360709066e8984f5946109a78460000151610cdf565b6109b48560200151610b0f565b60408051602081019490945283019190915260608201526080016105fd565b6000807f0000000000000000000000000000000000000000000000000000000000000000610a0084610ad1565b60405161190160f01b6020820152602281019290925260428201526062016105fd565b6000807f3c36a06e1d288b0f94f565588317a46ad11bc3c96992109f9a2365a2737259a7610a5484600001516106e7565b6020808601518051908201206040516105fd949392019283526020830191909152604082015260600190565b6000807fe8d3d963b33868fb116316bc3fd55e8f49123f30e4418f71e140d54b7cd3b2b9836000015184602001516040516020016105fd939291909283526020830191909152604082015260600190565b6000807f08c69a206c06f5334b35ceb1186181a713b21aff02cf66285f375084fbef2eb8610b0284600001516108a7565b6109b48560200151610a80565b6000606060005b835181101561090f5781610b42858381518110610b3557610b35612159565b6020026020010151610a23565b604051602001610b53929190612259565b60405160208183030381529060405291508080610b6f90612210565b915050610b16565b610b826000826106bd565b61095f60006102dd610dd7565b6000606060005b835181101561090f5781610bc2858381518110610bb557610bb5612159565b602002602001015161059c565b604051602001610bd3929190612259565b60405160208183030381529060405291508080610bef90612210565b915050610b96565b805160009081610c0682610c4a565b90506000610c188286602001516113bb565b95945050505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6000807f0000000000000000000000000000000000000000000000000000000000000000610a00846106e7565b610c91600080516020612545833981519152610422610dd7565b610cad5760405162461bcd60e51b815260040161065290612111565b6002546040516335313c2160e11b81526001600160a01b03838116600483015290911690636a62784290602401610688565b6000807fb16dfdb3b8fa033fe30ac976cd4a50ad256b6811c80d90fcd0b323eec190047d836000015184602001518560400151805190602001206040516020016105fd94939291909384526001600160a01b039290921660208401526040830152606082015260800190565b600080610d5b83600001516109d3565b90506000610d6d8285602001516113bb565b949350505050565b610d826000610422610dd7565b610d9e5760405162461bcd60e51b815260040161065290612111565b61095f600080516020612545833981519152825b600082815260208190526040902060010154610dcd81610e33565b6106e28383611338565b6000303303610e2d57600080368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b03169150610e309050565b50335b90565b61095f81610e3f610dd7565b611492565b610e4e8282610c21565b6108a3576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610e85610dd7565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60208082015182516001600160a01b0385166000908152600180855260408083208584529095529390205491929091610f019161227b565b8114610f5b5760405162461bcd60e51b815260206004820152602360248201527f44656c6567617461626c65436f72653a6e6f6e6365322d6f75742d6f662d6f726044820152623232b960e91b6064820152608401610652565b6001600160a01b039093166000908152600160209081526040808320938352929052209190915550565b6000805b83811015611330576000858583818110610fa557610fa5612159565b9050602002810190610fb7919061216f565b610fc090612293565b9050600080826020015151600003610fd85750849050805b6000805b8460200151518110156112735760008560200151828151811061100157611001612159565b60200260200101519050600061101682610bf7565b905082600003611027578095508594505b846001600160a01b0316816001600160a01b03161461109a5760405162461bcd60e51b815260206004820152602960248201527f44656c6567617461626c65436f72653a696e76616c69642d64656c656761746960448201526837b716b9b4b3b732b960b91b6064820152608401610652565b8151602081015185146111095760405162461bcd60e51b815260206004820152603160248201527f44656c6567617461626c65436f72653a696e76616c69642d617574686f726974604482015270792d64656c65676174696f6e2d6c696e6b60781b6064820152608401610652565b600061111484610a23565b905060005b8260400151518161ffff16101561125657600083604001518261ffff168151811061114657611146612159565b60200260200101516000015190506000816001600160a01b0316635068de4c86604001518561ffff168151811061117f5761117f612159565b6020026020010151602001518e60000151876040518463ffffffff1660e01b81526004016111af939291906122cb565b6020604051808303816000875af11580156111ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f29190612327565b9050806112415760405162461bcd60e51b815260206004820152601f60248201527f44656c6567617461626c65436f72653a6361766561742d72656a6563746564006044820152606401610652565b5050808061124e90612349565b915050611119565b5090519550935082915061126b905081612210565b915050610fdc565b50835180516001600160a01b031630146112e15760405162461bcd60e51b815260206004820152602960248201527f44656c6567617461626c65436f72653a696e76616c69642d696e766f636174696044820152681bdb8b5d185c99d95d60ba1b6064820152608401610652565b6112f9816000015182604001518360200151876114f6565b9650866113185760405162461bcd60e51b81526004016106529061236a565b5050505050808061132890612210565b915050610f89565b509392505050565b6113428282610c21565b156108a3576000828152602081815260408083206001600160a01b03851684529091529020805460ff19169055611377610dd7565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b60008060008084516041146113d65760009350505050610596565b50505060208201516040830151606084015160001a601b811015611402576113ff601b826123ab565b90505b8060ff16601b1415801561141a57508060ff16601c14155b1561142b5760009350505050610596565b60408051600081526020810180835288905260ff831691810191909152606081018490526080810183905260019060a0016020604051602081039080840390855afa15801561147e573d6000803e3d6000fd5b505050602060405103519350505050610596565b61149c8282610c21565b6108a3576114b4816001600160a01b031660146115d6565b6114bf8360206115d6565b6040516020016114d09291906123d0565b60408051601f198184030181529082905262461bcd60e51b825261065291600401612445565b600080848360405160200161150c929190612458565b60405160208183030381529060405290506060866001600160a01b03168583604051611538919061248f565b60006040518083038160008787f1925050503d8060008114611576576040519150601f19603f3d011682016040523d82523d6000602084013e61157b565b606091505b509093509050826115cc578051156115b457600061159882611771565b90508060405162461bcd60e51b81526004016106529190612445565b60405162461bcd60e51b81526004016106529061236a565b5050949350505050565b606060006115e58360026124a1565b6115f090600261227b565b6001600160401b03811115611607576116076117ea565b6040519080825280601f01601f191660200182016040528015611631576020820181803683370190505b509050600360fc1b8160008151811061164c5761164c612159565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061167b5761167b612159565b60200101906001600160f81b031916908160001a905350600061169f8460026124a1565b6116aa90600161227b565b90505b6001811115611722576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106116de576116de612159565b1a60f81b8282815181106116f4576116f4612159565b60200101906001600160f81b031916908160001a90535060049490941c9361171b816124c0565b90506116ad565b50831561096f5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610652565b80516060906044811015611795575050604080516020810190915260008152919050565b6004830180516003198301825290936117b790838101602001906024016124d7565b93525090919050565b6000602082840312156117d257600080fd5b81356001600160e01b03198116811461096f57600080fd5b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b0381118282101715611822576118226117ea565b60405290565b604051606081016001600160401b0381118282101715611822576118226117ea565b604051601f8201601f191681016001600160401b0381118282101715611872576118726117ea565b604052919050565b80356001600160a01b038116811461189157600080fd5b919050565b60006001600160401b038211156118af576118af6117ea565b50601f01601f191660200190565b600082601f8301126118ce57600080fd5b81356118e16118dc82611896565b61184a565b8181528460208386010111156118f657600080fd5b816020850160208301376000918101602001919091529392505050565b60006040828403121561192557600080fd5b61192d611800565b90506119388261187a565b815260208201356001600160401b0381111561195357600080fd5b61195f848285016118bd565b60208301525092915050565b60006020828403121561197d57600080fd5b81356001600160401b0381111561199357600080fd5b610d6d84828501611913565b6000602082840312156119b157600080fd5b5035919050565b600080604083850312156119cb57600080fd5b823591506119db6020840161187a565b90509250929050565b60006001600160401b038211156119fd576119fd6117ea565b5060051b60200190565b600082601f830112611a1857600080fd5b81356020611a286118dc836119e4565b82815260059290921b84018101918181019086841115611a4757600080fd5b8286015b84811015611a865780356001600160401b03811115611a6a5760008081fd5b611a788986838b0101611913565b845250918301918301611a4b565b509695505050505050565b600060608284031215611aa357600080fd5b611aab611828565b9050611ab68261187a565b81526020820135602082015260408201356001600160401b03811115611adb57600080fd5b611ae784828501611a07565b60408301525092915050565b600060208284031215611b0557600080fd5b81356001600160401b03811115611b1b57600080fd5b610d6d84828501611a91565b60008083601f840112611b3957600080fd5b5081356001600160401b03811115611b5057600080fd5b6020830191508360208260051b8501011115611b6b57600080fd5b9250929050565b60008060208385031215611b8557600080fd5b82356001600160401b03811115611b9b57600080fd5b611ba785828601611b27565b90969095509350505050565b600060608284031215611bc557600080fd5b611bcd611828565b9050611bd88261187a565b81526020820135602082015260408201356001600160401b03811115611bfd57600080fd5b611ae7848285016118bd565b600060408284031215611c1b57600080fd5b611c23611800565b905081356001600160401b0380821115611c3c57600080fd5b611c4885838601611a91565b83526020840135915080821115611c5e57600080fd5b5061195f848285016118bd565b600082601f830112611c7c57600080fd5b81356020611c8c6118dc836119e4565b82815260059290921b84018101918181019086841115611cab57600080fd5b8286015b84811015611a865780356001600160401b03811115611cce5760008081fd5b611cdc8986838b0101611c09565b845250918301918301611caf565b600060408284031215611cfc57600080fd5b611d04611800565b905081356001600160401b0380821115611d1d57600080fd5b611d2985838601611bb3565b83526020840135915080821115611d3f57600080fd5b5061195f84828501611c6b565b600082601f830112611d5d57600080fd5b81356020611d6d6118dc836119e4565b82815260059290921b84018101918181019086841115611d8c57600080fd5b8286015b84811015611a865780356001600160401b03811115611daf5760008081fd5b611dbd8986838b0101611cea565b845250918301918301611d90565b600060208284031215611ddd57600080fd5b81356001600160401b03811115611df357600080fd5b610d6d84828501611d4c565b600060208284031215611e1157600080fd5b61096f8261187a565b600060208284031215611e2c57600080fd5b81356001600160401b03811115611e4257600080fd5b610d6d84828501611cea565b600060408284031215611e6057600080fd5b611e68611800565b9050813581526020820135602082015292915050565b600060608284031215611e9057600080fd5b611e98611800565b905081356001600160401b03811115611eb057600080fd5b611ebc84828501611d4c565b825250611ecc8360208401611e4e565b602082015292915050565b600060208284031215611ee957600080fd5b81356001600160401b03811115611eff57600080fd5b610d6d84828501611e7e565b600060208284031215611f1d57600080fd5b81356001600160401b03811115611f3357600080fd5b610d6d84828501611c09565b600060408284031215611f5157600080fd5b61096f8383611e4e565b600060208284031215611f6d57600080fd5b81356001600160401b03811115611f8357600080fd5b610d6d84828501611c6b565b600060208284031215611fa157600080fd5b81356001600160401b03811115611fb757600080fd5b610d6d84828501611a07565b60008060408385031215611fd657600080fd5b611fdf8361187a565b946020939093013593505050565b600060208284031215611fff57600080fd5b81356001600160401b0381111561201557600080fd5b610d6d84828501611bb3565b60006040828403121561203357600080fd5b61203b611800565b905081356001600160401b038082111561205457600080fd5b611c4885838601611e7e565b60006020828403121561207257600080fd5b81356001600160401b0381111561208857600080fd5b610d6d84828501612021565b600080600080608085870312156120aa57600080fd5b84356001600160401b03808211156120c157600080fd5b6120cd888389016118bd565b955060208701359150808211156120e357600080fd5b506120f0878288016118bd565b935050604085013591506121066060860161187a565b905092959194509250565b60208082526028908201527f44656c6567617461626c65455243373231436f6e74726f6c6c65723a756e61756040820152671d1a1bdc9a5e995960c21b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b60008235603e1983360301811261218557600080fd5b9190910192915050565b60006105963683612021565b60008235605e1983360301811261218557600080fd5b6000808335601e198436030181126121c857600080fd5b8301803591506001600160401b038211156121e257600080fd5b6020019150600581901b3603821315611b6b57600080fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612222576122226121fa565b5060010190565b60005b8381101561224457818101518382015260200161222c565b83811115612253576000848401525b50505050565b6000835161226b818460208801612229565b9190910191825250602001919050565b6000821982111561228e5761228e6121fa565b500190565b60006105963683611cea565b600081518084526122b7816020860160208601612229565b601f01601f19169290920160200192915050565b6060815260006122de606083018661229f565b828103602084015260018060a01b03855116815260208501516020820152604085015160606040830152612315606083018261229f565b92505050826040830152949350505050565b60006020828403121561233957600080fd5b8151801515811461096f57600080fd5b600061ffff808316818103612360576123606121fa565b6001019392505050565b60208082526021908201527f44656c6567617461626c65436f72653a3a657865637574696f6e2d6661696c656040820152601960fa1b606082015260800190565b600060ff821660ff84168060ff038211156123c8576123c86121fa565b019392505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612408816017850160208801612229565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612439816028840160208801612229565b01602801949350505050565b60208152600061096f602083018461229f565b6000835161246a818460208801612229565b60609390931b6bffffffffffffffffffffffff19169190920190815260140192915050565b60008251612185818460208701612229565b60008160001904831182151516156124bb576124bb6121fa565b500290565b6000816124cf576124cf6121fa565b506000190190565b6000602082840312156124e957600080fd5b81516001600160401b038111156124ff57600080fd5b8201601f8101841361251057600080fd5b805161251e6118dc82611896565b81815285602083850101111561253357600080fd5b610c1882602083016020860161222956fe7b765e0e932d348852a6f810bfa1ab891e259123f02db8cdcde614c570223357a26469706673582212201d1772af32bc706ad02cfbd111d8127a552b74c1197c2a18e1cc082cc52cf1cb64736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "contractInvoke(((address,uint256,bytes),((address,bytes32,(address,bytes)[]),bytes)[])[])": {
        "params": {
          "batch": "Invocation[] - The batch of invocations to process."
        },
        "returns": {
          "_0": "success bool - Whether the batch of invocations was successfully processed."
        }
      },
      "getDelegationTypedDataHash((address,bytes32,(address,bytes)[]))": {
        "params": {
          "delegation": "Delegation - The delegation to get the type of"
        },
        "returns": {
          "_0": "bytes32 - The type of the delegation"
        }
      },
      "getInvocationsTypedDataHash((((address,uint256,bytes),((address,bytes32,(address,bytes)[]),bytes)[])[],(uint256,uint256)))": {
        "params": {
          "invocations": "Invocations"
        },
        "returns": {
          "_0": "bytes32 - The type of the Invocations"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "invoke(((((address,uint256,bytes),((address,bytes32,(address,bytes)[]),bytes)[])[],(uint256,uint256)),bytes)[])": {
        "params": {
          "signedInvocations": "SignedInvocation[] - The batch of signed invocations to process."
        },
        "returns": {
          "success": "bool - Whether the batch of invocations was successfully processed."
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "verifyInvocationSignature(((((address,uint256,bytes),((address,bytes32,(address,bytes)[]),bytes)[])[],(uint256,uint256)),bytes))": {
        "params": {
          "signedInvocation": "- The signed invocation to verify"
        },
        "returns": {
          "_0": "address - The address of the account authorizing this invocation to act on its behalf."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "contractInvoke(((address,uint256,bytes),((address,bytes32,(address,bytes)[]),bytes)[])[])": {
        "notice": "Allows a smart contract to submit a batch of invocations for processing, allowing itself to be the delegate."
      },
      "domainHash()": {
        "notice": "The hash of the domain separator used in the EIP712 domain hash."
      },
      "getDelegationTypedDataHash((address,bytes32,(address,bytes)[]))": {
        "notice": "Returns the typehash for this contract's delegation signatures."
      },
      "getInvocationsTypedDataHash((((address,uint256,bytes),((address,bytes32,(address,bytes)[]),bytes)[])[],(uint256,uint256)))": {
        "notice": "Returns the typehash for this contract's invocation signatures."
      },
      "invoke(((((address,uint256,bytes),((address,bytes32,(address,bytes)[]),bytes)[])[],(uint256,uint256)),bytes)[])": {
        "notice": "Allows anyone to submit a batch of signed invocations for processing."
      },
      "verifyInvocationSignature(((((address,uint256,bytes),((address,bytes32,(address,bytes)[]),bytes)[])[],(uint256,uint256)),bytes))": {
        "notice": "Verifies that the given invocation is valid."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/DelegatableERC721Controller.sol:DelegatableERC721Controller",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 3220,
        "contract": "contracts/DelegatableERC721Controller.sol:DelegatableERC721Controller",
        "label": "multiNonce",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 8159,
        "contract": "contracts/DelegatableERC721Controller.sol:DelegatableERC721Controller",
        "label": "erc721TokenAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/DelegatableERC721Controller.sol:DelegatableERC721Controller",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/DelegatableERC721Controller.sol:DelegatableERC721Controller",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}